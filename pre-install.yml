- name: Configure known hosts
  hosts: all

  tasks:
  # TODO: Don't update host keys: https://juriansluiman.nl/article/151/managing-ssh-known-hosts-with-ansible
  - known_hosts:
      name: "{{ inventory_hostname }}"
      key: "{{ lookup('pipe', 'ssh-keyscan -T 10 {{inventory_hostname }}') }}"
    delegate_to: localhost
  gather_facts: false

- name: Prepare hosts for OpenShift installation
  hosts: all
  vars:
    use_dnsmasq: "{{openshift_use_dnsmasq is undefined or (openshift_use_dnsmasq | bool)}}"
    openshift_version: "{{ openshift_pkg_version | default(openshift_image_tag) | default(openshift_release) | regex_replace('^[-v]', '') }}"
    openshift_major: "{{ openshift_version.split('.')[0] }}"
    openshift_minor: "{{ openshift_version.split('.')[1] }}"
    ocp_repos:
    - rhel-7-server-rpms
    - rhel-7-server-extras-rpms
    - rhel-7-server-optional-rpms
    - rhel-7-fast-datapath-rpms
    - "rhel-7-server-ose-{{openshift_major}}.{{openshift_minor}}-rpms"
    rhsm_enable_repos: |
      subscription-manager repos 
      --enable="rhel-7-server-rpms" 
      --enable="rhel-7-server-extras-rpms" 
      --enable="rhel-7-server-ose-{{openshift_major}}.{{openshift_minor}}-rpms" 
      --enable="rhel-7-server-ansible-2.6-rpms"


#    - name: bootstrap epel-release install
#      copy: src=ansible-bootstrap-epel.repo
#        dest=/etc/yum.repos.d/
#        owner=root group=root mode=0644
#      when: configure_epel

#    - name: epel-release install
#      yum: name=epel-release
#       enablerepo=ansible-bootstrap-epel
#       state=present
#      when: configure_epel

#    - name: epel repository disable
#      ini_file: dest=/etc/yum.repos.d/epel.repo
#            section=epel
#            option=enable
#            value=0
#      when: configure_epel

  tasks:
    - name: Enable Ansible ssh pipelining
      ini_file:
        path: /etc/ansible/ansible.cfg
        section: ssh_connection
        option: pipelining
        value: True
      delegate_to: localhost
      run_once: true

    - name: Enable repos on control host
      command: "{{ rhsm_enable_repos }}"
      when: ansible_distribution == "RedHat"
      delegate_to: localhost
      run_once: true

    - name: Enable repos on OpenShift hosts
      command: "{{ rhsm_enable_repos }}"
      when: ansible_distribution == "RedHat"

    - name: Install EPEL repo
      yum:
        name: "epel-release"
        state: present
      when: ansible_distribution == "CentOS"
          
      
#    - name: Install Ansible module dependencies
#      yum: name={{item}} state=present enablerepo={{epel_repo_id}}
#      with_items:
#        - jq
#        - yum-utils

#    - name: Set RHEL repos priority
#      rhsm_repo_prio: name={{item}} priority=1
#      with_items: "{{ openshift_rhsm_repos }}"
#      when: ansible_distribution == "RedHat"

#    - name: Enable OpenShift Enterprise repos
#      rhsm_repo: name={{item}} enable=1
#      with_items:
#        - rhel-7-server-ose-{{openshift_major}}.{{openshift_minor}}-rpms
#      when:
#        (deployment_type == "enterprise" or deployment_type == "openshift-enterprise")
#        and (openshift_rhsm_repos is defined and openshift_rhsm_repos)

#    - name: Disable old OpenShift Enterprise repos
#      rhsm_repo: name="rhel-7-server-ose-{{openshift_major}}.{{item}}-rpms" enable=0
#      with_sequence: start={{ openshift_minor | int - 1 }} end=0 stride=-1
#      when:
#        (deployment_type == "enterprise" or deployment_type == "openshift-enterprise")
#        and (openshift_rhsm_repos is defined and openshift_rhsm_repos)

#    - name: Set OpenShift Enterprise repo priority
#      rhsm_repo_prio: name={{item}} priority=1
#      with_items:
#        - rhel-7-server-ose-{{openshift_major}}.{{openshift_minor}}-rpms
#      when:
#        (deployment_type == "enterprise" or deployment_type == "openshift-enterprise")
#        and (openshift_rhsm_repos is defined and openshift_rhsm_repos)

#    - name: Enable OpenShift Origin repos
#      copy: src=maxamillion-origin-next-epel-7
#        dest=/etc/yum.repos.d/
#        owner=root group=root mode=0644
#      when: ansible_distribution != "RedHat"

    - name: Install prerequisites on control host
      yum:
        name: "{{item}}"
        state: present
      with_items:
      - openshift-ansible
      when: ansible_distribution == "RedHat"
      delegate_to: localhost
      run_once: true

    - name: Install prerequisites on OpenShift hosts
      yum:
        name: "{{item}}"
        state: present
      with_items:
      - wget
      - git
      - net-tools
      - bind-utils
      - bridge-utils
      - bash-completion
      - kexec-tools
      - sos
      - psacct
      - yum-utils
      - iptables-services
      - python36
      - PyYAML
      - python-ipaddress
      - libsemanage-python
      - python-docker
      - docker

#     - name: Disable NetworkManager service
#       service: name=NetworkManager state=stopped enabled=false
#       when: not use_dnsmasq

#     - name: Enable NetworkManager service
#       service: name=NetworkManager state=started enabled=true
#       when: use_dnsmasq

#     - name: Enable network service
#       service: name=network state=started enabled=true
#       when: not use_dnsmasq

#     - name: Extra iptables configuration
#       iptables_raw:
#         name: openshift_extra
#         keep_unmanaged: yes
#         rules: "{{ appuio_extra_iptables }}"
#       when: appuio_extra_iptables is defined

#     - command: rpm -q docker
#       ignore_errors: yes
#       failed_when: no
#       register: docker_installed

#     - docker_image:
#         name: "{{openshift_component_prefix}}-{{item}}:v{{openshift_version}}"
#       #ignore_errors: yes
#       with_items:
#         - deployer
#         - docker-builder
#         - docker-registry
#         - haproxy-router
#         - keepalived-ipfailover
#         - sti-builder
#         - pod
#       when: docker_installed.rc == 0

# - name: Prepare masters for OpenShift installation
#   hosts: masters

#   tasks:
#     - name: Install redistributable OpenShift Clients
#       yum: name={{openshift_package_name}}-clients-redistributable state=latest

#     - name: Checkout web console style repo
#       git: accept_hostkey=true dest=/var/lib/puppet-openshift3/style repo={{master_style_repo_url}} version={{master_style_repo_ref|default(omit)}} key_file={{master_style_repo_ssh_key|default(omit)}}
#       when: master_style_repo_url|default("") != ""
